program → stmt-sequence  

stmt-sequence → statement { ; statement }

statement → if-stmt | repeat-stmt | assign-stmt | read-stmt | write-stmt | while-stmt | for-stmt

if-stmt → if (exp) stmt-sequence [ else stmt-sequence ] endif

repeat-stmt → repeat stmt-sequence until exp 

while-stmt -> while (exp) stmt-sequence endwhile

for-stmt -> for (assign-stmt; exp; factor) stmt-sequence endfor

read-stmt → read identifier  

write-stmt → write exp 

assign-stmt -> identifier exp-reg

exp-reg -> := exp | ::= regex-stmt

exp -> simple-exp [comparison-op simple-exp]

comparison-op -> < | > | = | <= | >=

simple-exp -> term { addop term }

addop -> + | -

term -> power { mulop power }

mulop -> * | / | %

power -> factor powop power | factor  (右结合) ---> factor [powop power]

powop -> ^

factor -> (exp) | number | id | autoop id

autoop -> ++ | --

regex-stmt -> andreg { orop andreg }

orop -> |

andreg -> topreg { andop topreg }

andop -> &

topreg -> reg-factor { topop }

topop -> # | ?

reg-factor -> (regex-stmt) | identifier | number
